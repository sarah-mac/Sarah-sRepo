/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stockcontrol;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author e5112931
 */
public class StockDriver extends JFrame
{

    /**
     * Creates new form stockDriver
     */
    private Writer writeData;
    private Writer writer;
    private Reader reader;
    private DefaultTableModel model;
    private Stock stock;
    private String path = "prod_data.txt";
    private String stockPath = "stock_data.txt";
    private String purchasePath = "purchases_data.txt";
    DecimalFormat decimalFormat = new DecimalFormat("#.00");

    public StockDriver() throws IOException
    {
        this.reader = new Reader("prod_data.txt");
        this.writeData = new Writer("prod_data.txt");
        this.stock = new Stock();
        
        initComponents();
        model = (DefaultTableModel) stockTable.getModel();
        reader.setProductDataMap(path);
        reader.setStockLevelsMap(stockPath);
        updateStockFileWindowClose();
        

    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        productCodeField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        descriptionField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        stockField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        displayAllStockButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        updateStockButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        productSearchField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Stock Control"));

        jLabel1.setText("Product Code:");

        jLabel2.setText("Price:");

        jLabel3.setText("Description:");

        jLabel4.setText("Quantity:");

        addButton.setText("Add ");
        addButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Add New Product:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(priceField, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(productCodeField))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)))
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stockField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton)
                    .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(productCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(stockField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(jLabel7)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Display Stock"));

        displayAllStockButton.setText(" Display All Stock");
        displayAllStockButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                displayAllStockButtonActionPerformed(evt);
            }
        });

        stockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Product Code", "Description", "Price", "Stock"
            }
        ));
        stockTable.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                stockTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(stockTable);

        updateStockButton.setText("Update");
        updateStockButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                updateStockButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Update stock file:");

        jLabel9.setText("Select row to buy a product:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(displayAllStockButton)
                                .addGap(172, 172, 172)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(updateStockButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displayAllStockButton)
                    .addComponent(updateStockButton)
                    .addComponent(jLabel6))
                .addGap(4, 4, 4)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Search for Products"));

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Product Code or Description Search:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(productSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(searchButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void updateStockFileWindowClose()
    {
        super.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        super.addWindowListener(new WindowAdapter()
        {

            @Override
            public void windowClosing(WindowEvent windowEvent)
            {
                int result = JOptionPane.showConfirmDialog(null, "Would you like to update the stock file before closing?", null, JOptionPane.YES_NO_OPTION);

                if (result == JOptionPane.YES_OPTION)
                {
                    try
                    {
                        writeData.rewriteStockFile();
                    } catch (IOException ex)
                    {
                        Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (result == JOptionPane.NO_OPTION)
                {

                }

                System.exit(0);

            }

        });
    }

    private void displayAllStockButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_displayAllStockButtonActionPerformed
    {//GEN-HEADEREND:event_displayAllStockButtonActionPerformed
        int row = 0;
        model.setRowCount(reader.getProductDataMap().size());
        {
            {
                for (HashMap.Entry<String, Product> productDataMapEntry : reader.getProductDataMap().entrySet())
                {
                    Product productsMap = productDataMapEntry.getValue();
                    String description = productsMap.getDescription();
                    double price = productsMap.getPrice();
                    String priceAsString = decimalFormat.format(price);

                    for (HashMap.Entry<String, Integer> stockLevelsEntry : stock.getStockLevelsMap().entrySet())
                    {

                        if (productDataMapEntry.getKey().equals(stockLevelsEntry.getKey()))
                        {
                            stockTable.setValueAt(productDataMapEntry.getKey(), row, 0);
                            stockTable.setValueAt(description, row, 1);
                            stockTable.setValueAt(priceAsString, row, 2);
                            stockTable.setValueAt(stockLevelsEntry.getValue(), row, 3);
                            row++;
                        }
                    }

                }

            }
        }
    }//GEN-LAST:event_displayAllStockButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        int count = 0;
        int row = 0;

        String productSearchLine = productSearchField.getText();

        for (HashMap.Entry<String, Product> productDataMapEntry : reader.getProductDataMap().entrySet())
        {

            if (productDataMapEntry.getKey().equals(productSearchLine))
            {

                Product productSearch = reader.getProductDataMap().get(productSearchLine);

                for (HashMap.Entry<String, Integer> stockLevelsEntry : stock.getStockLevelsMap().entrySet())
                {
                    if (productSearchLine.equals((stockLevelsEntry.getKey())))
                    {
                        String priceAsString = decimalFormat.format(productSearch.getPrice());
                        count++;
                        model.setRowCount(count);
                        stockTable.setValueAt(productSearchLine, row, 0);
                        stockTable.setValueAt(productSearch.getDescription(), row, 1);
                        stockTable.setValueAt(priceAsString, row, 2);
                        stockTable.setValueAt(stockLevelsEntry.getValue(), row, 3);
                        row++;
                    }

                }

            } else
            {

                if (productDataMapEntry.getValue().getDescription().contains(productSearchLine))
                {
                    Product foundDescription = productDataMapEntry.getValue();

                    for (HashMap.Entry<String, Integer> stockLevelsEntry : stock.getStockLevelsMap().entrySet())
                    {
                        if (productDataMapEntry.getKey().equals(stockLevelsEntry.getKey()))
                        {
                            count++;
                            String priceAsString = decimalFormat.format(foundDescription.getPrice());
                            model.setRowCount(count);
                            stockTable.setValueAt(foundDescription.getProductNumber(), row, 0);
                            stockTable.setValueAt(foundDescription.getDescription(), row, 1);
                            stockTable.setValueAt(priceAsString, row, 2);
                            stockTable.setValueAt(stockLevelsEntry.getValue(), row, 3);
                            row++;
                        }
                    }

                }

            }
        }


    }//GEN-LAST:event_searchButtonActionPerformed
//the user clicks on the row of the table to select a product to buy, this is checked and if confirmed then stock quantity is reduced in hashmap
    private void stockTableMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_stockTableMouseClicked
    {//GEN-HEADEREND:event_stockTableMouseClicked
        //gets current date and time as string
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
        Date dateObject = new Date();
        String date = dateFormat.format(dateObject);
        //gets row clicked
        int index = stockTable.getSelectedRow();
        String selectedProductNumber = model.getValueAt(index, 0).toString();
        String selectedDescription = model.getValueAt(index, 1).toString();
        String selectedPrice = model.getValueAt(index, 2).toString();
        int selectedQuantity = Integer.valueOf(model.getValueAt(index, 3).toString());
        //option to check Yes or No
        int result = JOptionPane.showConfirmDialog(null, "Are you sure you would like to buy " + selectedDescription + " at " + selectedPrice + "? ", null, JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION)
        {
            stock.getStockLevelsMap().put(selectedProductNumber, selectedQuantity - 1);
            
            String purchaseLine = "";

            try {
                purchaseLine = String.format("%-18s %-14s %-24s %-9s %-10s %5s ",date, " | " + selectedProductNumber,  " | " + selectedDescription,  " | " +  selectedPrice," | " +   1, "| " + reader.getRunningTotal(purchasePath, selectedPrice));
            } catch (IOException ex) {
                Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);
            }
          
            try
            {
                writeData.writePurchaseEvents(purchaseLine);
            } catch (IOException ex)
            {
                Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);
            }
            try
            {
                reader.getRunningTotal(purchasePath, selectedPrice);
            } catch (IOException ex)
            {
                Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (result == JOptionPane.NO_OPTION)
            {

            }
        }


    }//GEN-LAST:event_stockTableMouseClicked

    private void updateStockButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_updateStockButtonActionPerformed
    {//GEN-HEADEREND:event_updateStockButtonActionPerformed

        try
        {
            writeData.rewriteStockFile();
        } catch (IOException ex)
        {
            Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_updateStockButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
    {//GEN-HEADEREND:event_addButtonActionPerformed
        DateFormat dateformat = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
        Date dateobj = new Date();
        String date = dateformat.format(dateobj);
        String priceLine = priceField.getText();
        String descriptionLine = descriptionField.getText();
        String productCodeLine = productCodeField.getText();
        String stockQuantity = stockField.getText();

        if (stock.getStockLevelsMap().containsKey(productCodeLine))
        {
            int result = JOptionPane.showConfirmDialog(null, "This product is already listed would you like to add additional quantities?", null, JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.YES_OPTION)
            {
                try
                {
                    writeData.writeDeliveryEvents(date,productCodeLine, descriptionLine, priceLine, stockQuantity);
                } catch (IOException ex)
                {
                    Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (HashMap.Entry<String, Integer> stockLevelsEntry : stock.getStockLevelsMap().entrySet())
                {

                    if (productCodeLine.equals((stockLevelsEntry.getKey())))
                    {
                        int newQuantity = stockLevelsEntry.getValue() + Integer.valueOf(stockQuantity);
                        stock.getStockLevelsMap().put(productCodeLine, newQuantity);

                    }
                    
                }
                if (result == JOptionPane.NO_OPTION)
                {

                }
            }
        } else
        {
            //calls the writeToFile method from WriteProductData class which takes the textLine as a value to write to a text file
            //IO exception is thrown here as the method deals with FileWriter and PrintWriter
            try
            {
                writeData.writeToFile(productCodeLine, descriptionLine, priceLine);
            } catch (IOException ex)
            {
                Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);
            }
            //calls the writeToStockFile method to create a text file from the stockLine String value
            try
            {
                writeData.writeToStockFile(productCodeLine, stockQuantity);
            } catch (IOException ex)
            {
                Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);
            }
            try
            {
                writeData.writeToPriceFile(productCodeLine, priceLine);

            } catch (IOException ex)
            {

                Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);

            }
            try
            {
                reader.setProductDataMap(path);
            } catch (IOException ex)
            {
                Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);
            }
            try
            {
                reader.setStockLevelsMap(stockPath);
            } catch (IOException ex)
            {
                Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);
            }
            try
            {
                writeData.writeDeliveryEvents(date, productCodeLine, descriptionLine, priceLine, stockQuantity);
            } catch (IOException ex)
            {
                Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        

    }//GEN-LAST:event_addButtonActionPerformed

    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(StockDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(StockDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(StockDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(StockDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
 System.out.println("running1");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            
         
            
            public void run()
            {
                   System.out.println("running");
                try
                {
                  new StockDriver().setVisible(true);
                } catch (IOException ex)
                {
                    Logger.getLogger(StockDriver.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField descriptionField;
    private javax.swing.JButton displayAllStockButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField priceField;
    private javax.swing.JTextField productCodeField;
    private javax.swing.JTextField productSearchField;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField stockField;
    private javax.swing.JTable stockTable;
    private javax.swing.JButton updateStockButton;
    // End of variables declaration//GEN-END:variables
}
